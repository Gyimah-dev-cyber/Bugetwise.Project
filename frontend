import 'package:flutter/material.dart';
import 'package:dio/dio.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:animations/animations.dart';
import 'package:intl/intl.dart';
import 'package:local_auth/local_auth.dart';
import 'package:path_provider/path_provider.dart';
import 'package:overlay_support/overlay_support.dart';
import 'package:ai_suggestions/ai_suggestions.dart';
import 'package:in_app_purchase/in_app_purchase.dart';
import 'package:multi_user/multi_user.dart';
import 'package:speech_to_text/speech_to_text.dart' as stt;
import 'package:pdf/widgets.dart' as pw;
import 'package:csv/csv.dart';
import 'package:image_picker/image_picker.dart';
import 'package:tesseract_ocr/tesseract_ocr.dart';
import 'dart:io';
import 'dart:convert';
import 'screens/login_screen.dart';
import 'screens/register_screen.dart';
import 'screens/home_screen.dart';
import 'screens/budget_screen.dart';
import 'screens/expense_screen.dart';
import 'screens/chart_screen.dart';
import 'screens/bill_reminder_screen.dart';
import 'screens/financial_insights_screen.dart';
import 'screens/settings_screen.dart';
import 'screens/profile_screen.dart';
import 'screens/backup_restore_screen.dart';
import 'screens/ai_budget_suggestions_screen.dart';
import 'screens/subscription_screen.dart';
import 'screens/multi_user_screen.dart';
import 'screens/custom_categories_screen.dart';
import 'screens/voice_command_screen.dart';
import 'screens/export_screen.dart';
import 'screens/savings_goals_screen.dart';
import 'screens/bill_splitting_screen.dart';
import 'screens/financial_forecast_screen.dart';
import 'screens/currency_conversion_screen.dart';
import 'screens/budget_anomaly_screen.dart';
import 'screens/receipt_scanning_screen.dart';
import 'screens/investment_tracking_screen.dart';
import 'screens/automated_bill_payment_screen.dart';
import 'screens/goal_progress_visualization_screen.dart';
import 'screens/ai_spending_insights_screen.dart';
import 'screens/expense_sharing_screen.dart';
import 'screens/tax_calculation_screen.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  NotificationService().initNotifications();
  runApp(OverlaySupport.global(child: BudgetWiseApp()));
}

class BudgetWiseApp extends StatefulWidget {
  @override
  _BudgetWiseAppState createState() => _BudgetWiseAppState();
}

class _BudgetWiseAppState extends State<BudgetWiseApp> {
  bool isDarkMode = false;
  String currency = 'USD';

  void toggleTheme() {
    setState(() {
      isDarkMode = !isDarkMode;
    });
  }

  void updateCurrency(String newCurrency) {
    setState(() {
      currency = newCurrency;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'BudgetWise',
      theme: isDarkMode
          ? ThemeData.dark().copyWith(
              textTheme: GoogleFonts.poppinsTextTheme(ThemeData.dark().textTheme),
            )
          : ThemeData.light().copyWith(
              textTheme: GoogleFonts.poppinsTextTheme(ThemeData.light().textTheme),
            ),
      home: HomeScreen(toggleTheme: toggleTheme, updateCurrency: updateCurrency, currency: currency),
    );
  }
}

// tax_calculation_screen.dart
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';

class TaxCalculationScreen extends StatefulWidget {
  @override
  _TaxCalculationScreenState createState() => _TaxCalculationScreenState();
}

class _TaxCalculationScreenState extends State<TaxCalculationScreen> {
  double income = 0.0;
  double expenses = 0.0;
  double taxRate = 0.15;
  double taxOwed = 0.0;
  TextEditingController incomeController = TextEditingController();
  TextEditingController expensesController = TextEditingController();

  void calculateTax() {
    setState(() {
      income = double.tryParse(incomeController.text) ?? 0.0;
      expenses = double.tryParse(expensesController.text) ?? 0.0;
      taxOwed = (income - expenses) * taxRate;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Automated Tax Calculation')),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(controller: incomeController, decoration: InputDecoration(labelText: 'Total Income')),
            TextField(controller: expensesController, decoration: InputDecoration(labelText: 'Total Expenses')),
            SizedBox(height: 10),
            ElevatedButton(onPressed: calculateTax, child: Text('Calculate Tax')),
            SizedBox(height: 20),
            Text('Estimated Tax Owed: \$${taxOwed.toStringAsFixed(2)}', style: TextStyle(fontSize: 18)),
          ],
        ),
      ),
    );
  }
}

// home_screen.dart
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:animations/animations.dart';
import 'in_app_notifications.dart';
import 'login_screen.dart';
import 'budget_screen.dart';
import 'expense_screen.dart';
import 'chart_screen.dart';
import 'bill_reminder_screen.dart';
import 'financial_insights_screen.dart';
import 'settings_screen.dart';
import 'profile_screen.dart';
import 'backup_restore_screen.dart';
import 'ai_budget_suggestions_screen.dart';
import 'subscription_screen.dart';
import 'multi_user_screen.dart';
import 'custom_categories_screen.dart';
import 'voice_command_screen.dart';
import 'export_screen.dart';
import 'savings_goals_screen.dart';
import 'bill_splitting_screen.dart';
import 'financial_forecast_screen.dart';
import 'currency_conversion_screen.dart';
import 'budget_anomaly_screen.dart';
import 'receipt_scanning_screen.dart';
import 'investment_tracking_screen.dart';
import 'automated_bill_payment_screen.dart';
import 'goal_progress_visualization_screen.dart';
import 'ai_spending_insights_screen.dart';
import 'expense_sharing_screen.dart';
import 'tax_calculation_screen.dart';

class HomeScreen extends StatelessWidget 
  final VoidCallback toggleTheme;
  final Function(String) updateCurrency;
  final String currency;

  HomeScreen({required this.toggleTheme, required this.updateCurrency, required this.currency});
